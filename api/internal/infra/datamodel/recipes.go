// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package datamodel

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// InsertAll inserts all rows with the specified column values, using an executor.
func (o RecipeSlice) InsertAll(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}
	var sql string
	vals := []interface{}{}
	for i, row := range o {
		if !boil.TimestampsAreSkipped(ctx) {
			currTime := time.Now().In(boil.GetLocation())

			if queries.MustTime(row.CreatedAt).IsZero() {
				queries.SetScanner(&row.CreatedAt, currTime)
			}
			if queries.MustTime(row.UpdatedAt).IsZero() {
				queries.SetScanner(&row.UpdatedAt, currTime)
			}
		}

		if err := row.doBeforeInsertHooks(ctx, exec); err != nil {
			return err
		}

		nzDefaults := queries.NonZeroDefaultSet(recipeColumnsWithDefault, row)
		wl, _ := columns.InsertColumnSet(
			recipeAllColumns,
			recipeColumnsWithDefault,
			recipeColumnsWithoutDefault,
			nzDefaults,
		)
		if i == 0 {
			sql = "INSERT INTO `recipes` " + "(`" + strings.Join(wl, "`,`") + "`)" + " VALUES "
		}
		sql += strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), len(vals)+1, len(wl))
		if i != len(o)-1 {
			sql += ","
		}
		valMapping, err := queries.BindMapping(recipeType, recipeMapping, wl)
		if err != nil {
			return err
		}
		value := reflect.Indirect(reflect.ValueOf(row))
		vals = append(vals, queries.ValuesFromMapping(value, valMapping)...)
	}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, vals...)
	}

	_, err := exec.ExecContext(ctx, sql, vals...)
	if err != nil {
		return errors.Wrap(err, "datamodel: unable to insert into recipes")
	}

	return nil
}

// Recipe is an object representing the database table.
type Recipe struct {
	ID           string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Title        string      `boil:"title" json:"title" toml:"title" yaml:"title"`
	ThumbnailURL null.String `boil:"thumbnail_url" json:"thumbnail_url,omitempty" toml:"thumbnail_url" yaml:"thumbnail_url,omitempty"`
	Recipe       string      `boil:"recipe" json:"recipe" toml:"recipe" yaml:"recipe"`
	CategoryID   int         `boil:"category_id" json:"category_id" toml:"category_id" yaml:"category_id"`
	Ingredient   types.JSON  `boil:"ingredient" json:"ingredient" toml:"ingredient" yaml:"ingredient"`
	CreatedAt    null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt    null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *recipeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L recipeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RecipeColumns = struct {
	ID           string
	Title        string
	ThumbnailURL string
	Recipe       string
	CategoryID   string
	Ingredient   string
	CreatedAt    string
	UpdatedAt    string
}{
	ID:           "id",
	Title:        "title",
	ThumbnailURL: "thumbnail_url",
	Recipe:       "recipe",
	CategoryID:   "category_id",
	Ingredient:   "ingredient",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
}

var RecipeTableColumns = struct {
	ID           string
	Title        string
	ThumbnailURL string
	Recipe       string
	CategoryID   string
	Ingredient   string
	CreatedAt    string
	UpdatedAt    string
}{
	ID:           "recipes.id",
	Title:        "recipes.title",
	ThumbnailURL: "recipes.thumbnail_url",
	Recipe:       "recipes.recipe",
	CategoryID:   "recipes.category_id",
	Ingredient:   "recipes.ingredient",
	CreatedAt:    "recipes.created_at",
	UpdatedAt:    "recipes.updated_at",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpertypes_JSON struct{ field string }

func (w whereHelpertypes_JSON) EQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_JSON) NEQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_JSON) LT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_JSON) LTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_JSON) GT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_JSON) GTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var RecipeWhere = struct {
	ID           whereHelperstring
	Title        whereHelperstring
	ThumbnailURL whereHelpernull_String
	Recipe       whereHelperstring
	CategoryID   whereHelperint
	Ingredient   whereHelpertypes_JSON
	CreatedAt    whereHelpernull_Time
	UpdatedAt    whereHelpernull_Time
}{
	ID:           whereHelperstring{field: "`recipes`.`id`"},
	Title:        whereHelperstring{field: "`recipes`.`title`"},
	ThumbnailURL: whereHelpernull_String{field: "`recipes`.`thumbnail_url`"},
	Recipe:       whereHelperstring{field: "`recipes`.`recipe`"},
	CategoryID:   whereHelperint{field: "`recipes`.`category_id`"},
	Ingredient:   whereHelpertypes_JSON{field: "`recipes`.`ingredient`"},
	CreatedAt:    whereHelpernull_Time{field: "`recipes`.`created_at`"},
	UpdatedAt:    whereHelpernull_Time{field: "`recipes`.`updated_at`"},
}

// RecipeRels is where relationship names are stored.
var RecipeRels = struct {
	Category string
	Reports  string
}{
	Category: "Category",
	Reports:  "Reports",
}

// recipeR is where relationships are stored.
type recipeR struct {
	Category *Category   `boil:"Category" json:"Category" toml:"Category" yaml:"Category"`
	Reports  ReportSlice `boil:"Reports" json:"Reports" toml:"Reports" yaml:"Reports"`
}

// NewStruct creates a new relationship struct
func (*recipeR) NewStruct() *recipeR {
	return &recipeR{}
}

func (r *recipeR) GetCategory() *Category {
	if r == nil {
		return nil
	}
	return r.Category
}

func (r *recipeR) GetReports() ReportSlice {
	if r == nil {
		return nil
	}
	return r.Reports
}

// recipeL is where Load methods for each relationship are stored.
type recipeL struct{}

var (
	recipeAllColumns            = []string{"id", "title", "thumbnail_url", "recipe", "category_id", "ingredient", "created_at", "updated_at"}
	recipeColumnsWithoutDefault = []string{"id", "title", "thumbnail_url", "recipe", "category_id", "ingredient"}
	recipeColumnsWithDefault    = []string{"created_at", "updated_at"}
	recipePrimaryKeyColumns     = []string{"id"}
	recipeGeneratedColumns      = []string{}
)

type (
	// RecipeSlice is an alias for a slice of pointers to Recipe.
	// This should almost always be used instead of []Recipe.
	RecipeSlice []*Recipe
	// RecipeHook is the signature for custom Recipe hook methods
	RecipeHook func(context.Context, boil.ContextExecutor, *Recipe) error

	recipeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	recipeType                 = reflect.TypeOf(&Recipe{})
	recipeMapping              = queries.MakeStructMapping(recipeType)
	recipePrimaryKeyMapping, _ = queries.BindMapping(recipeType, recipeMapping, recipePrimaryKeyColumns)
	recipeInsertCacheMut       sync.RWMutex
	recipeInsertCache          = make(map[string]insertCache)
	recipeUpdateCacheMut       sync.RWMutex
	recipeUpdateCache          = make(map[string]updateCache)
	recipeUpsertCacheMut       sync.RWMutex
	recipeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var recipeAfterSelectHooks []RecipeHook

var recipeBeforeInsertHooks []RecipeHook
var recipeAfterInsertHooks []RecipeHook

var recipeBeforeUpdateHooks []RecipeHook
var recipeAfterUpdateHooks []RecipeHook

var recipeBeforeDeleteHooks []RecipeHook
var recipeAfterDeleteHooks []RecipeHook

var recipeBeforeUpsertHooks []RecipeHook
var recipeAfterUpsertHooks []RecipeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Recipe) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Recipe) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Recipe) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Recipe) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Recipe) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Recipe) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Recipe) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Recipe) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Recipe) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRecipeHook registers your hook function for all future operations.
func AddRecipeHook(hookPoint boil.HookPoint, recipeHook RecipeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		recipeAfterSelectHooks = append(recipeAfterSelectHooks, recipeHook)
	case boil.BeforeInsertHook:
		recipeBeforeInsertHooks = append(recipeBeforeInsertHooks, recipeHook)
	case boil.AfterInsertHook:
		recipeAfterInsertHooks = append(recipeAfterInsertHooks, recipeHook)
	case boil.BeforeUpdateHook:
		recipeBeforeUpdateHooks = append(recipeBeforeUpdateHooks, recipeHook)
	case boil.AfterUpdateHook:
		recipeAfterUpdateHooks = append(recipeAfterUpdateHooks, recipeHook)
	case boil.BeforeDeleteHook:
		recipeBeforeDeleteHooks = append(recipeBeforeDeleteHooks, recipeHook)
	case boil.AfterDeleteHook:
		recipeAfterDeleteHooks = append(recipeAfterDeleteHooks, recipeHook)
	case boil.BeforeUpsertHook:
		recipeBeforeUpsertHooks = append(recipeBeforeUpsertHooks, recipeHook)
	case boil.AfterUpsertHook:
		recipeAfterUpsertHooks = append(recipeAfterUpsertHooks, recipeHook)
	}
}

// One returns a single recipe record from the query.
func (q recipeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Recipe, error) {
	o := &Recipe{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "datamodel: failed to execute a one query for recipes")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Recipe records from the query.
func (q recipeQuery) All(ctx context.Context, exec boil.ContextExecutor) (RecipeSlice, error) {
	var o []*Recipe

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "datamodel: failed to assign all query results to Recipe slice")
	}

	if len(recipeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Recipe records in the query.
func (q recipeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "datamodel: failed to count recipes rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q recipeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "datamodel: failed to check if recipes exists")
	}

	return count > 0, nil
}

// Category pointed to by the foreign key.
func (o *Recipe) Category(mods ...qm.QueryMod) categoryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.CategoryID),
	}

	queryMods = append(queryMods, mods...)

	return Categories(queryMods...)
}

// Reports retrieves all the report's Reports with an executor.
func (o *Recipe) Reports(mods ...qm.QueryMod) reportQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`reports`.`recipe_id`=?", o.ID),
	)

	return Reports(queryMods...)
}

// LoadCategory allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (recipeL) LoadCategory(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRecipe interface{}, mods queries.Applicator) error {
	var slice []*Recipe
	var object *Recipe

	if singular {
		var ok bool
		object, ok = maybeRecipe.(*Recipe)
		if !ok {
			object = new(Recipe)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRecipe)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRecipe))
			}
		}
	} else {
		s, ok := maybeRecipe.(*[]*Recipe)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRecipe)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRecipe))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &recipeR{}
		}
		args = append(args, object.CategoryID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &recipeR{}
			}

			for _, a := range args {
				if a == obj.CategoryID {
					continue Outer
				}
			}

			args = append(args, obj.CategoryID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`categories`),
		qm.WhereIn(`categories.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Category")
	}

	var resultSlice []*Category
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Category")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for categories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for categories")
	}

	if len(categoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Category = foreign
		if foreign.R == nil {
			foreign.R = &categoryR{}
		}
		foreign.R.Recipes = append(foreign.R.Recipes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CategoryID == foreign.ID {
				local.R.Category = foreign
				if foreign.R == nil {
					foreign.R = &categoryR{}
				}
				foreign.R.Recipes = append(foreign.R.Recipes, local)
				break
			}
		}
	}

	return nil
}

// LoadReports allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (recipeL) LoadReports(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRecipe interface{}, mods queries.Applicator) error {
	var slice []*Recipe
	var object *Recipe

	if singular {
		var ok bool
		object, ok = maybeRecipe.(*Recipe)
		if !ok {
			object = new(Recipe)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRecipe)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRecipe))
			}
		}
	} else {
		s, ok := maybeRecipe.(*[]*Recipe)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRecipe)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRecipe))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &recipeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &recipeR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`reports`),
		qm.WhereIn(`reports.recipe_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load reports")
	}

	var resultSlice []*Report
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice reports")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on reports")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for reports")
	}

	if len(reportAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Reports = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &reportR{}
			}
			foreign.R.Recipe = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.RecipeID {
				local.R.Reports = append(local.R.Reports, foreign)
				if foreign.R == nil {
					foreign.R = &reportR{}
				}
				foreign.R.Recipe = local
				break
			}
		}
	}

	return nil
}

// SetCategory of the recipe to the related item.
// Sets o.R.Category to related.
// Adds o to related.R.Recipes.
func (o *Recipe) SetCategory(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Category) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `recipes` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"category_id"}),
		strmangle.WhereClause("`", "`", 0, recipePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CategoryID = related.ID
	if o.R == nil {
		o.R = &recipeR{
			Category: related,
		}
	} else {
		o.R.Category = related
	}

	if related.R == nil {
		related.R = &categoryR{
			Recipes: RecipeSlice{o},
		}
	} else {
		related.R.Recipes = append(related.R.Recipes, o)
	}

	return nil
}

// AddReports adds the given related objects to the existing relationships
// of the recipe, optionally inserting them as new records.
// Appends related to o.R.Reports.
// Sets related.R.Recipe appropriately.
func (o *Recipe) AddReports(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Report) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RecipeID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `reports` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"recipe_id"}),
				strmangle.WhereClause("`", "`", 0, reportPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RecipeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &recipeR{
			Reports: related,
		}
	} else {
		o.R.Reports = append(o.R.Reports, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &reportR{
				Recipe: o,
			}
		} else {
			rel.R.Recipe = o
		}
	}
	return nil
}

// Recipes retrieves all the records using an executor.
func Recipes(mods ...qm.QueryMod) recipeQuery {
	mods = append(mods, qm.From("`recipes`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`recipes`.*"})
	}

	return recipeQuery{q}
}

// FindRecipe retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRecipe(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Recipe, error) {
	recipeObj := &Recipe{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `recipes` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, recipeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "datamodel: unable to select from recipes")
	}

	if err = recipeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return recipeObj, err
	}

	return recipeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Recipe) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("datamodel: no recipes provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(recipeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	recipeInsertCacheMut.RLock()
	cache, cached := recipeInsertCache[key]
	recipeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			recipeAllColumns,
			recipeColumnsWithDefault,
			recipeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(recipeType, recipeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(recipeType, recipeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `recipes` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `recipes` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `recipes` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, recipePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "datamodel: unable to insert into recipes")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "datamodel: unable to populate default values for recipes")
	}

CacheNoHooks:
	if !cached {
		recipeInsertCacheMut.Lock()
		recipeInsertCache[key] = cache
		recipeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Recipe.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Recipe) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	recipeUpdateCacheMut.RLock()
	cache, cached := recipeUpdateCache[key]
	recipeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			recipeAllColumns,
			recipePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("datamodel: unable to update recipes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `recipes` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, recipePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(recipeType, recipeMapping, append(wl, recipePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "datamodel: unable to update recipes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "datamodel: failed to get rows affected by update for recipes")
	}

	if !cached {
		recipeUpdateCacheMut.Lock()
		recipeUpdateCache[key] = cache
		recipeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q recipeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "datamodel: unable to update all for recipes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "datamodel: unable to retrieve rows affected for recipes")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RecipeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("datamodel: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recipePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `recipes` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, recipePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "datamodel: unable to update all in recipe slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "datamodel: unable to retrieve rows affected all in update all recipe")
	}
	return rowsAff, nil
}

// Delete deletes a single Recipe record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Recipe) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("datamodel: no Recipe provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), recipePrimaryKeyMapping)
	sql := "DELETE FROM `recipes` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "datamodel: unable to delete from recipes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "datamodel: failed to get rows affected by delete for recipes")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q recipeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("datamodel: no recipeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "datamodel: unable to delete all from recipes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "datamodel: failed to get rows affected by deleteall for recipes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RecipeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(recipeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recipePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `recipes` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, recipePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "datamodel: unable to delete all from recipe slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "datamodel: failed to get rows affected by deleteall for recipes")
	}

	if len(recipeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Recipe) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRecipe(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RecipeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RecipeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recipePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `recipes`.* FROM `recipes` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, recipePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "datamodel: unable to reload all in RecipeSlice")
	}

	*o = slice

	return nil
}

// RecipeExists checks if the Recipe row exists.
func RecipeExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `recipes` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "datamodel: unable to check if recipes exists")
	}

	return exists, nil
}

// Exists checks if the Recipe row exists.
func (o *Recipe) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return RecipeExists(ctx, exec, o.ID)
}

var mySQLRecipeUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Recipe) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("datamodel: no recipes provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(recipeColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLRecipeUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	recipeUpsertCacheMut.RLock()
	cache, cached := recipeUpsertCache[key]
	recipeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			recipeAllColumns,
			recipeColumnsWithDefault,
			recipeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			recipeAllColumns,
			recipePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("datamodel: unable to upsert recipes, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`recipes`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `recipes` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(recipeType, recipeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(recipeType, recipeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "datamodel: unable to upsert for recipes")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(recipeType, recipeMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "datamodel: unable to retrieve unique values for recipes")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "datamodel: unable to populate default values for recipes")
	}

CacheNoHooks:
	if !cached {
		recipeUpsertCacheMut.Lock()
		recipeUpsertCache[key] = cache
		recipeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
